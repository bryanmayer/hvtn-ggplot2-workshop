---
title: "Visualizations with ggplot2 and immunogenicity data"
author: Bryan Mayer
date: 2022-10-26
format: 
  revealjs:
    smaller: true
    slide-number: true
editor: visual
---

## Getting Started

```{r pres-setup}
library(dplyr)
library(ggplot2)
library(cowplot)
library(countdown)
mock_bama_example = subset(hvtnReports::mock_bama, antigen == "ag_b" & isotype == "IgG")
```

-   Download the workshop Rmd script to follow along.
-   <https://github.com/mayerbry/hvtn-ggplot2-workshop>
-   Load the project and open xxx.Rmd
-   Follow instructions in first chunk:
    -   Make sure you are in the correct directory.
    -   Load libraries: ggplot2, dplyr, cowplot
    -   Load in data: `mock_bama_example`

## Code and Attribution

The presentation and code will be publicly available on GitHub.

#### Many, many people have made ggplot2 tutorials!

-   Primary material sources:
    -   [**R for Data Science**](https://r4ds.had.co.nz/data-visualisation.html)
    -   <https://ggplot2.tidyverse.org/reference>
    -   <https://ggplot.library.duke.edu/slides/>
-   

## Goal today -- Template HVTN figure

![](ex-figure.png){fig-align="center" width="110%"}

## Roadmap

-   ggplot2 basics
-   leading examples
-   build the HVTN BAMA response rate + magnitude plot

## ggplot2 - the quintessential example

**Basic template:**

```{r syntax-ex, eval = F, echo = T}
ggplot(data = <DATA>) + 
  <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))

```

**In action:**

```{r first-ex, echo = T, fig.width=6,fig.height=3}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = class))

```

## ggplot2 vs. base R plot

-   For simple plots, knowing both is useful.

    -   `plot(mpg$displ, mpg$hwy)`
    -   Many R packages and objects use plot() on the backend, so knowledge useful.

-   The grammar of ggplot2 eases extension into complex plots.

    -   Ex. mapping of colors and legend generation is automatic within ggplot2.
    -   Base R relies on data loops; manually setting up legend post-hoc.

    ```{r base-pl, echo = T, fig.height = 5, fig.width = 6, fig.align = "center"}
    plot(mpg[mpg$class == "compact", ]$displ, mpg[mpg$class == "compact", ]$hwy, col = "orange", xlim = c(1.5, 7),
         ylab = "hwy", xlab = "displ")   
        
    points(mpg[mpg$class == "2seater", ]$displ, mpg[mpg$class == "2seater", ]$hwy, col = "red")
        
    legend(x = 5, y = 40, c("compact", "2seater"), col = c("orange", "red"), pch = 1)
    ```

## ggplot2 Basics

```{r aes-map, eval = F, echo = T}
# explicitly stating 'mapping = aes()' is uncommon. "data = " necessary for geom assignments.
plA = ggplot(data = <DATA>, aes(<MAPPINGS>)) + 
  <GEOM_FUNCTION>()

plB = ggplot(aes(<MAPPINGS>)) + 
  <GEOM_FUNCTION>(data = <DATA>)

plC = ggplot(data = <DATA>) + 
  <GEOM_FUNCTION>(aes(<MAPPINGS>))

plD = ggplot() + 
  <GEOM_FUNCTION>(data = <DATA>, aes(<MAPPINGS>))
```

::: {style="font-size: 0.75em"}
-   `ggplot()` function creates a new plot.
    -   `aes()` arguments assigned within `ggplot()` global across all plots unless overrided within a geom.
-   `<GEOM_FUNCTION>()` (ex. `geom_point()` scatterplot) draws a geometry on the plot. I.e., the 'type'(s) of plot.
    -   Argument assignments within `geom_**()` will supersede those assigned at `ggplot()`-level but will not apply to other geoms (local).
-   `aes()` construct aesthetic mappings.
-   `+` is a ggplot2 operator (function) used to build a plot.
-   ggplot2 plot objects can be saved as a variables.
    -   Layers can be added later to a ggplot2 object.
    -   Advanced: The internals of the ggplot2 object can be manipulated.
    -   Advanced: Multiple ggplot2 objects can be stored in a list (automation).
:::

## Common Geometries

::: columns
::: {.column width="60%"}
```{r ex-geoms}
#| output-location: column-fragment
#| fig-height: 10
#| fig-align: left

base = ggplot(data = mpg, aes(x = displ, y = hwy)) 
pl1 = base + geom_point() + ggtitle("geom_point")
pl2 = base + geom_line() + ggtitle("geom_line")
pl3 = base + geom_smooth(se = F) + ggtitle("geom_smooth")
pl4 = base + geom_count(se = F) + ggtitle("geom_count")
pl5 = ggplot(data = mpg, aes(x = hwy)) + geom_histogram() + ggtitle("geom_histogram")
pl6 = ggplot(data = mpg, aes(x = class, y = hwy)) + geom_boxplot() + ggtitle("geom_boxplot")

plot_grid(pl5, pl6, pl1, pl2, pl3, pl4, ncol = 2)

```
:::

::: {.column width="30%"}
|       Type        |          Function          |
|:-----------------:|:--------------------------:|
|   Scatter/Point   |       `geom_point()`       |
|       Line        |       `geom_line()`        |
|     Box plot      |      `geom_boxplot()`      |
|     Bar plot      | `geom_bar()`, `geom_col()` |
|     Histogram     |     `geom_histogram()`     |
|      Density      |      `geom_density()`      |
| Regression/Spline |      `geom_smooth()`       |
|       Text        |       `geom_text()`        |
| Vert./Horiz. Line |     `geom_{vh}line()`      |
|  Jittered Point   |      `geom_jitter()`       |
|       Count       |       `geom_count()`       |
:::
:::

## Combining Geometries

Plots with multiple geometries can be quickly made by layering.

```{r comb-geom-setup, echo = T}
base_boxplot = ggplot(data = mpg, aes(x = class, y = hwy)) 
base_point = ggplot(data = mpg, aes(x = displ, y = hwy)) 
```

```{r comb-geom-pl}
#| fig-align: center

pl1 = base_point + geom_point() + geom_smooth(se = F) + ggtitle("base_point + geom_point() + geom_smooth() + geom_smooth()")
pl2 = base_boxplot + geom_boxplot() + geom_point() + ggtitle("base_boxplot + geom_boxplot() + geom_point()")

plot_grid(pl1, pl2, ncol = 1)

```

## Aesthetic Mappings

::: columns
::: {.column width="50%"}
-   Aesthetic mappings within `aes()` link data to an aesthetic.
-   Mappings depend on plot geometries.
    -   Check individual help files for information on them (ex., `?geom_text`).
    -   Common source of error, but error message usually informative.

    > base_boxplot + geom_histogram()
    Error in `f()`:
    ! stat_bin() can only have an x or y aesthetic.
    Run `rlang::last_error()` to see where the error occurred.
:::

::: {.column width="50%"}
#### Common Aesthetics

|    Aesthetic     | `aes()` Argument |
|:----------------:|:----------------:|
|      x-axis      |       `x`        |
|      y-axis      |       `y`        |
|  Color outline   |     `color`      |
|    Color fill    |      `fill`      |
| Point shape/type |     `shape`      |
|    Point size    |      `size`      |
|     Opacity      |     `alpha`      |
|    Line type     |    `linetype`    |
|       Text       |     `label`      |
:::
:::

## Aesthetic Settings vs. Mappings

-   **Setting**: an aesthetic independent of data, assigned outside of the `aes()` argument.
    -   This must be assigned within the appropriate geometry.
    -   Assigning a setting within `aes()` is a data mapping, ggplot2 will assume this a variable with a single value.

```{r setting-ex,  eval = F, echo = T}
ggplot(data = mpg, aes(x = displ, y = hwy, color = class)) + geom_point()

ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(color = "blue")

ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(aes(color = "blue"))

```

```{r setting-pl, fig.align = "center", fig.width=13}
col_map_pl = ggplot(data = mpg, aes(x = displ, y = hwy, color = class)) + geom_point()
col_set_pl = ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(color = "blue")
col_set_pl_wrong = ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(aes(color = "blue"))
plot_grid(col_map_pl, col_set_pl, col_set_pl_wrong, nrow = 1)

```

## Continuous vs. Discrete Aesthetics

-   Aesthetic mappings depend on type of data.
-   ggplot2 will assume numeric classes are continuous.
    -   If the aesthetics requires a certain data, an informative error will display.
        -   Depending on geometry, aesthetics may only take one type of data (ex. linetype must be categorical class).
    -   If the aesthetic is flexible, the plot may appear odd (potentially with warning).
    -   Quick solution: wrap numeric variables in `factor()` if need discrete mapping.

```{r cns-bp, eval = F, echo = T}
ggplot(data = mpg, aes(x = cyl, y = hwy)) + geom_boxplot()
ggplot(data = mpg, aes(x = factor(cyl), y = hwy)) + geom_boxplot()

```

```{r cns-bp-pl, fig.align = "center", fig.width=13}
bp_pl_wrong = ggplot(data = mpg, aes(x = cyl, y = hwy)) + geom_boxplot()
bp_pl_right = ggplot(data = mpg, aes(x = factor(cyl), y = hwy)) + geom_boxplot()
plot_grid(bp_pl_wrong, bp_pl_right)

```

## Boxplot example (mpg) - setup

Question: Did highway mpg (`hwy`) improve between 1999 and 2008 (`year`)?

-   Data fields: `hwy` `year` (which is x?, which is y?)

-   Geometry? `geom_boxplot`

-   Mappings: let's map year to color.

**Take 5 minutes to make this plot. Work with your neighbor.**

::: fragment
```{r countdown1}

countdown(
  minutes = 5,
  #padding = "1px", margin = "5%", 
  font_size = "1em"
)
```
:::

## Box plot example (mpg) - v1

```{r exercise-1, echo = T, fig.cap = "Why Factor?"}

mpg_base = ggplot(mpg, aes(x = factor(year), y = hwy, colour = factor(year))) +
  geom_boxplot()

mpg_base
```

## Scale functions

```{r scale-syntax, echo = T, eval = F}
ggplot(data = <DATA>, aes(<MAPPINGS>)) + 
  <GEOM_FUNCTION>()> +
  <SCALE_FUNCTION>()

```

-   Scale functions: 'transformation' of the aesthetic mapping.
    -   How each level of the data relates to the type of aesthetic.
    -  First argument is always the element (legend or axis) title.
    -   Legend or axis labels of data values: `limits` (breaks), `labels`.
    -  A way to apply transformations to the data as they plotted.
- Generating of high quality plots often requires manipulation of the scale functions.

## Discrete and Manual Scale Functions

::: {style="font-size: 0.65em"}

-   Discrete scales (`scale_*_discrete()`): tinkering with palettes, labels and breaks.
  -  Adjusting discrete x- or y-axis (`scale_x_discrete`, `scale_y_discrete`) has some quirks.
-   Manual scales (`scale_*_manual`): explicit mapping of data level to a setting.
      - `scale_color_manual(breaks = c("A", "B"), labels = c("A", "B"), values = c("red", "blue"))`
      - Make sure breaks and labels match as expected.

:::

::: {style="font-size: 0.75em"}


```{r scale-map, echo = T, fig.height=3.5}
#| output-location: fragment
#| fig-align: "left"

ggplot(data = mpg, 
       aes(x = displ, y = hwy, colour = factor(cyl))) +
  geom_point() +
  scale_color_manual("cylinder #", breaks = c(4, 5, 6, 8),
                     labels = paste(c(4, 5, 6, 8), "cylinder"),
                     values = c("red", "green", "purple", "black"))
  
```

:::

## Manual labeling

- Use named vectors for consistent repeated scale mappings.
  - Ex. Same vaccine group color and label assignments across many plots.
  - Note: Use \` \` for non-standard R column names.
  
```{r scale-manual, echo = T}

cyl_colors = c(`4` = "red", `5` = "green", 
               `6` = "purple", `8` = "black")

cyl_labels =  paste(c(4, 5, 6, 8), "cylinder")
names(cyl_labels) = c(4, 5, 6, 8)

ggplot(data = mpg, 
       aes(x = displ, y = hwy, colour = factor(cyl))) +
  geom_point() +
  scale_color_manual("cylinder #", values = cyl_colors,
                     labels = cyl_labels)

```



## Continuous Scales

-   Continuous scale manipulation tends to apply to continuous data mapped to the x- and/or y-axes.
  - Common exceptions: heat maps, point size mapping.
- The default x- and y-axis scales are `scale_x_continuous` and `scale_y_continuous`.

```{r cns-scales}



```

## Coordinate functions

::: {style="font-size: 0.75em"}
-   Coordinate functions adjust the coordinate system of the plot.
    -   Not direct transformation to the data: different than scale mappings. Important when summary measures (e.g., median) are computed by ggplot2.
-   Common coordinate functions:
    -   `coord_cartesian()`: default. Limit arguments can be used to zoom plot (Example).
    -   `coord_flip()`: flips x and y on the plots.
    -   `coord_polar()`: use polar coordinate system.
    -   `coord_fixed()`: fixes aspect ratio, make 'square' plots.
:::

```{r}
set.seed(10)
```

```{r, echo = T}
coord_ex = data.frame(grp = rep(LETTERS[1:2], each = 10), y = rnorm(20))
pl1 = ggplot(coord_ex, aes(x = grp, y = y))+ geom_boxplot() + scale_y_continuous(limits = c(0, NA))
pl2 = ggplot(coord_ex, aes(x = grp, y = y))+ geom_boxplot() + coord_cartesian(ylim = c(0, NA))
```

```{r coord-pl, fig.align="center", fig.width=10}
plot_grid(pl1+annotate("text", label = "Data removed\noutside limits", x = 1, y = 0.8, size = 5), 
          pl2+annotate("text", label = "Plot zoomed", x = 1, y = 0.8, size = 5), nrow=1)
```

## Making a nice looking plot.

- Adjusted axes title and labels.
  - `scale_y_continuous("y title", breaks = 5*3:9)`.
- Adjusting legends.
  - Set breaks and labels within the appropriate scale function.
- Another way to change legend and axes titles: 
  - `labs(x = "x title", y = "y title" colour = "legend title")`
  -  Alternative axes title: `xlab()`, `ylab()`
- `theme()`:
  - There are lots of plot settings to adjust (see `?theme`). 
  - General themes can be made and applied across multiple plots.
    - ggplot2 also supplies themes: `theme_bw()` `theme_classic()`

## Box plot example (mpg) - Improvement

Take 5 minutes. Work with your neighbor.

-   **Make the labels nicer.**
    -   label x-axis as 'year', y-axis as 'highway mpg'
-   **Map year to color.**
    -   make 1998 = red, 2008 = black
    -   then 1998 = black, 2008 = red.
    -   Can you generalize this task?
-   **Show the raw data as points. (Bonus: jitter them.)**
-   **Apply `+ theme_classic()`**

::: fragment
```{r countdown2}

countdown(
  minutes = 5,
  #padding = "1px", margin = "5%", 
  font_size = "1em"
)
```
:::

## Box plot example (mpg) - finalize

::: {style="font-size: 0.75em"}
```{r exercise-2, echo = T, fig.cap = "Questions?"}
#| fig.align = "center",
#| fig.height = 4

mpg_colors = c(`1999` = "black", `2008` = "red")

mpg_final = mpg_base +
  geom_point(position = position_jitter(width = 0.2)) +
  scale_color_manual(values = mpg_colors) +
  labs(x = "year", y = "highway mpg", colour = "year") +
  theme_classic()

mpg_final
```
:::

## Faceting

::: {style="font-size: 0.7em"}
-   `facet_grid` or `facet_wrap` create multiple panels across a variable level.
-   `facet_grid`: structured, explicit mapping of rows and col (rectangular matrix).
    -   2-var ex. `+ facet_grid(rows = vars(var1), cols = vars(var2))` or `+ facet_grid(var1 ~ var2)`
    -   ex. `+ facet_grid(rows = vars(var1))` or `+ facet_grid(var1 ~ .)`
-   `facet_wrap`: sequence of panels across variable or layered variables.
    -   ex. `+ facet_wrap(vars(var1))` or `+ facet_wrap(~ var1)`
-   Last mpg exercise: use facteting to investigate whether 1998 vs. 2008 highway mpg varies by car `class`
:::

## Box plot example (mpg) - faceting

```{r facet-ex, echo = T}
mpg_final +
  facet_wrap(~ class) 
```

## HVTN Example

Will build this figure in 3 parts

![](ex-figure-markup.png){fig-align="center" width="800" height="600"}

## HVTN - Data

::: {style="font-size: 0.7em"}
```{r, echo = T}

dplyr::glimpse(mock_bama_example)

```
:::

## HVTN - Data setup

We have fixed colors and shapes, let's assign those now:

```{r, echo = T}

hvtn_pl_colors = c(T1 =  "#1749FF", T2 = "#D92321", T3 = "#0AB7C9", P = "#787873", Negative = "#8F8F8F")
hvtn_pl_shapes = c(T1 =  16, T2 = 16, T3 = 16, P = 16, Negative = 2)
axis_grp_order = c("T1", "T2", "T3", "P")

```

## Magnitude plot - Mapping (discussion)

![](ex-figure-magnitude.png)

-   Data fields?
    -   Transformations and facets?
-   Geometry?
-   Mappings?
-   Challenges?

## Magnitude plot - Mapping

-   Data fields: magnitude (`delta`), groups (`rx_code`), response (`response`)
    -   Transformations: log-scale plot, truncation of the magnitude
    -   Facetting: visits (`visitno`)
-   Geometry: `geom_boxplot`, `geom_point` (jitter)
-   Mappings: group to color, response to shape
-   Challenges:
    -   Separate color for 'Negative' within each group (and legend)
    -   Exclude non-responders from box plot geometry
-   Exercise: make magnitude box plot
    -   Ignore issue of Negative
    -   Hint 1: use `scale_shape_manual(values = c(2, 16))`
    -   Hint 2: use `scale_color_manual(values = hvtn_pl_colors)`

```{r countdown3}
#| output-location: fragment
countdown(
  minutes = 5,
  #padding = "1px", margin = "5%", 
  font_size = "1em"
)
```

## Response magnitude box plots - version 1

```{r exercise-3-mag}

mag_bp_v1 = ggplot(data = mock_bama_example, aes(x = rx_code, y = pmax(100, delta), color = rx_code)) +
  geom_boxplot(data = subset(mock_bama_example, response == 1), show.legend = F, outlier.colour = NA) +
  geom_point(aes(shape = factor(response), group = rx_code), position = position_jitter(width = 0.2)) +
  scale_colour_manual("", values = hvtn_pl_colors) +
  scale_shape_manual("", values = c(2, 16)) +
  scale_x_discrete(limits = axis_grp_order) +
  labs(y = "IgG binding antibody units (MFI - blank)", x = "") +
  facet_wrap(~ visitno) +
  scale_y_log10(breaks = c(100, 1000, 2000, 3000, 5000, 10000)) +
  theme_classic() 

mag_bp_v1

```

## Response magnitude box plots - tinkering

-   Rethink the mapping: `rx_code` -\> x-axis, but need new map to color.

```{r exercise-4-mag, echo = T}

mock_bama_example$grp_response = if_else(mock_bama_example$response == 0, 
                                         "Negative", 
                                         mock_bama_example$rx_code)

set.seed(14) # this keeps the jitter consistent each time

mag_bp_v2  = ggplot(data = mock_bama_example, aes(x = rx_code, y = pmax(100, delta), color = grp_response)) +
  geom_boxplot(data = subset(mock_bama_example, response == 1), show.legend = F, outlier.colour = NA) +
  geom_point(aes(shape = grp_response, group = rx_code), position = position_jitter(width = 0.2)) +
  scale_colour_manual("", values = hvtn_pl_colors) +
  scale_shape_manual("", values = hvtn_pl_shapes) +
  facet_wrap(~visitno) +
  scale_x_discrete(limits = axis_grp_order) +
  labs(y = "IgG binding antibody units (MFI - blank)", x = "") +
  scale_y_log10(breaks = c(100, 1000, 2000, 3000, 5000, 10000),
                label = c("< 100", 1000, 2000, 3000, 5000, 10000)) +
  theme_classic() +
  theme(panel.background = element_rect(color="black"), legend.position = "bottom")

```

## Response magnitude box plots - version 2

-   To do before final figure: remove panel (strip) labels

```{r exercise-4-mag-pl}
mag_bp_v2 
```

```{r, eval = F}
mag_bp_v2  = ggplot(data = mock_bama_example, aes(x = rx_code, y = pmax(100, delta), color = grp_response)) +
  stat_boxplot(data = subset(mock_bama_example, response == 1), geom = "errorbar", width = 0.5, show.legend = F) +
  geom_boxplot(data = subset(mock_bama_example, response == 1), show.legend = F, outlier.colour = NA) +
  geom_point(aes(shape = grp_response, group = rx_code), 
             position = position_jitter(width = 0.2)) +
  scale_colour_manual("", values = hvtn_pl_colors) +
  scale_shape_manual("", values = hvtn_pl_shapes) +
  facet_wrap(~visitno, labeller = as_labeller(c(`5` = "Visit 5",
                             `7` = "Visit 7",
                             `11` = "Visit 11"))) +
  scale_x_discrete(limits = names(hvtn_pl_colors)) +
  labs(y = "IgG binding antibody units (MFI - blank)", x = "") +
  scale_y_log10(breaks = c(100, 1000, 2000, 3000, 5000, 10000),
                label = c("< 100", 1000, 2000, 3000, 5000, 10000)) +
  theme_classic() +
  theme(strip.background = element_blank(), panel.background = element_rect(color="black"),
        legend.position = "bottom", axis.ticks.x = element_blank(), strip.text = element_blank())

bp_pl

```

## Response rate barplot

```{r, eval = F}

ggplot(mock_bama, aes(x = rx_code, y = 100*response, fill = rx_code)) +
  stat_summary_bin(fun = "mean", geom = "bar") +
  scale_fill_manual(values = pl_colors, guide = "none") +
  facet_wrap(~visitno, labeller = 
               as_labeller(c(`5` = "Visit 5",
                             `7` = "Visit 7",
                             `11` = "Visit 11"))) +
  scale_x_discrete(limits = names(pl_colors)) +
  labs(y = "Response rate (%)", x = "") +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 102)) +
  theme_classic() +
  theme(strip.background = element_blank(), panel.background = element_rect(color="black"))


  geom_bar(aes(weight = response), stat="count")

```

```{r, eval = F}

response_rate_summary = mock_bama %>%
  group_by(rx_code, antigen, visitno) %>%
  summarize(
    Total = n(),
    Responders = sum(response),
    rr = mean(response),
    .groups = "drop"
  )

```

```{r, eval = F}


rr_bar = ggplot(response_rate_summary, aes(x = rx_code, y = 100*rr, fill = rx_code)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = pl_colors, guide = "none") +
  facet_wrap(~visitno, labeller = 
               as_labeller(c(`5` = "Visit 5",
                             `7` = "Visit 7",
                             `11` = "Visit 11"))) +
  scale_x_discrete(limits = names(pl_colors)) +
  labs(y = "Response rate (%)", x = "") +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 102)) +
  theme_classic() +
  theme(strip.background = element_blank(), panel.background = element_rect(color="black"))

rr_bar

```

```{r, eval = F}

rr_txt_pl = ggplot(response_rate_summary, aes(x = rx_code, y = 1, label = paste(Responders, Total, sep = "\n"))) +
  geom_text() +
    facet_wrap(~visitno, labeller = 
               as_labeller(c(`5` = "Visit 5",
                             `7` = "Visit 7",
                             `11` = "Visit 11"))) +
  scale_x_discrete(limits = names(pl_colors)) +
  scale_y_continuous(breaks = 1, labels = "Responders\nTotal", expand = c(0, 0)) +
  labs(y = "") +
  theme(panel.background = element_blank(), axis.text.x = element_blank(),
        axis.title.x = element_blank(), axis.ticks = element_blank(),
        strip.background = element_blank(), strip.text = element_blank(), 
        axis.text.y = element_text(size = 16), plot.margin = margin())

rr_txt_pl

```

```{r, eval = F}

 cowplot::plot_grid(rr_bar+theme(axis.text.x = element_blank()) + ggtitle("HVTN Trial IgG Antibody Responses to ag_b"), 
                   rr_txt_pl, bp_pl, 
                   rel_heights = c(15, 2, 25), 
                   nrow = 3, align = "v", axis = "l") +
  draw_figure_label(label = paste("SOURCE: SCHARP bmayer ", Sys.time()), size = 12, position = "bottom.left")

# p

```
